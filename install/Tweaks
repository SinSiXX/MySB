#!/bin/bash
# ----------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")"/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### Console tweaks
echo
echo "########## Console tweaks"
install -v -o root -g root -m 0644 ${MySB_InstallDir}/templates/tweaks/bashrc.tmpl /root/.bashrc
{
    echo "PATH=/usr/sbin:/sbin:/usr/bin:/bin:/usr/local/bin:/usr/local/sbin:${MySB_InstallDir}/bin:/sbin"
    echo "export PATH"
    echo
} >>/root/.bashrc
install -v -o root -g root -m 0644 ${MySB_InstallDir}/templates/tweaks/profile.tmpl /root/.profile
install -v -o root -g root -m 0644 ${MySB_InstallDir}/templates/tweaks/bash_aliases.tmpl /root/.bash_aliases
install -v -o root -g root -m 0644 ${MySB_InstallDir}/templates/tweaks/bash_profile.tmpl /root/.bash_profile
install -v -o root -g root -m 0644 /etc/skel/.bash_logout /root/.bash_logout

#### permanently adding scripts to PATH to all users and root
if [ -z "$(grep "${MySB_InstallDir}/bin" /etc/profile)" ]; then
    echo
    echo "########## /etc/profile"
    echo "" >>/etc/profile
    echo "# MySB" >>/etc/profile
    echo "PATH=$PATH:${MySB_InstallDir}/bin:/sbin" | tee -a /etc/profile
fi

#### Editors
echo
echo "########## Editors"
install -v -o root -g root -m 0644 ${MySB_InstallDir}/templates/tweaks/etc.vimrc.tmpl /etc/vim/vimrc
install -v -o root -g root -m 0644 ${MySB_InstallDir}/templates/tweaks/etc.nanorc.tmpl /etc/nanorc

#### Motd
echo
echo "########## Motd"
install -v -o root -g root -m 0755 ${MySB_InstallDir}/templates/tweaks/etc.rc.local.tmpl /etc/rc.local
perl -pi -e "s/<MySB_Version>/$gsCurrentVersion/g" /etc/rc.local

#### Change timezone
echo
echo "########## Timezone"
if [ -n "$gsTimeZone" ]; then
    install -v -o root -g root -m 0644 ${MySB_InstallDir}/templates/systemd/timesyncd.conf.tmpl /etc/systemd/timesyncd.conf
    timedatectl set-timezone "$gsTimeZone"
    timedatectl set-local-rtc 0
    timedatectl status
    if [ -f /etc/adjtime ]; then
        sed -i "s/UTC/LOCAL/g;" /etc/adjtime
    fi
    dpkg-reconfigure -f noninteractive tzdata
fi
ServicesToRestart="${ServicesToRestart} systemd-timesyncd"

#### /etc/sysctl.conf
# /etc/sysctl.d/999-swappiness.conf
if ([ "$gsMemory" -lt 2048 ] && [ "$(free -m | grep 'Swap' | awk '{ print $2 }')" -ne 0 ]); then
    echo
    echo "########## /etc/sysctl.d/999-swappiness.conf"
    {
        echo "vm.swappiness=10"
        echo "vm.vfs_cache_pressure=50"
    } >/etc/sysctl.d/999-swappiness.conf
fi
# /etc/sysctl.d/999-MySB.conf
echo
echo "########## /etc/sysctl.d/999-MySB.conf"
{
    if [ "${gbIsInstalled_OpenVPN}" == "YES" ]; then
        echo "net.ipv4.ip_forward=1"
    fi
    echo "net.ipv4.ip_dynaddr=0"
    echo "net.ipv4.tcp_syncookies=1"
    echo "net.ipv4.conf.all.rp_filter=1"
    echo "net.ipv4.conf.all.proxy_arp=0"
    echo "net.ipv4.icmp_echo_ignore_broadcasts=1"
    echo "net.ipv4.conf.all.accept_source_route=0"
    echo "net.ipv4.conf.all.accept_redirects=0"
    echo "net.ipv4.conf.all.secure_redirects=1"
    echo "net.ipv4.conf.all.log_martians=1"
} >/etc/sysctl.d/999-MySB.conf
# Print config
sysctl --system

#### locale
echo
echo "########## Locale"
[ -z "${gsLocale}" ] && gsLocale="en_US"
sed -i "s/# ${gsLocale}.UTF-8 UTF-8/${gsLocale}.UTF-8 UTF-8/g;" /etc/locale.gen
export LANGUAGE=${gsLocale}.UTF-8
export LANG=${gsLocale}.UTF-8
update-locale "LANG=${gsLocale}.UTF-8" &>/dev/null
locale-gen "${gsLocale}.UTF-8" &>/dev/null
dpkg-reconfigure -f noninteractive locales &>/dev/null
locale >${MySB_InstallDir}/files/locale
cat ${MySB_InstallDir}/files/locale

#### /etc/hostname
echo
echo "########## /etc/hostname"
hostnamectl set-hostname "${gsHostNameFqdn}"
hostnamectl status

# /etc/hosts
echo
echo "########## /etc/hosts"
if [ -z $funcs_MySB_SecurityRules ]; then
    # shellcheck source=inc/funcs_by_script/funcs_MySB_SecurityRules
    source ${MySB_InstallDir}/inc/funcs_by_script/funcs_MySB_SecurityRules
fi
gfnCreateHostsFile
cat /etc/hosts

#### /etc/network/interfaces
echo
echo "########## Remove IPv6"
if [ -f /etc/default/grub ]; then
    source /etc/default/grub
    if [ -n "$GRUB_CMDLINE_LINUX" ] && [ -z "$(echo $GRUB_CMDLINE_LINUX | grep 'ipv6.disable=1')" ]; then
        sed -i "s/$GRUB_CMDLINE_LINUX/$GRUB_CMDLINE_LINUX ipv6.disable=1/g;" /etc/default/grub
    else
        perl -pi -e 's/GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="ipv6.disable=1"/g' /etc/default/grub
    fi
    update-grub
fi
rm -fv /etc/pgl/ipv6.*

# Add iptables-restore
echo
echo "########## Persistent iptables rules"
gfnPackageBundleInstall "iptables-persistent"
systemctl enable netfilter-persistent
install -d /etc/iptables
[ -f /usr/share/netfilter-persistent/plugins.d/25-ip6tables ] && mv -v /usr/share/netfilter-persistent/plugins.d/25-ip6tables /usr/share/netfilter-persistent/plugins.d/25-ip6tables.old
[ -f /etc/iptables/rules.v6 ] && rm -fv /etc/iptables/rules.v6

#### Rsyslog
echo
echo "########## Rsyslog"
install -v -o root -g root -m 0644 ${MySB_InstallDir}/templates/tweaks/etc.rsyslog.conf.tmpl /etc/rsyslog.conf
rm -vf /etc/rsyslog.d/iptables.conf
[ ! -f /var/log/iptables.log ] && touch /var/log/iptables.log
echo "if (\$msg contains '[MySB] ') then /var/log/iptables.log" | tee -a /etc/rsyslog.d/iptables.conf
echo "& stop" | tee -a /etc/rsyslog.d/iptables.conf
gfnLogRotate 'iptables'
ServicesToRestart="${ServicesToRestart} rsyslog"

#### SSH Keygen
echo
echo "########## SSH Keygen"
install -d -v -o root -g root -m 0700 /root/.ssh
[ ! -f /root/.ssh/id_rsa ] && ssh-keygen -q -t rsa -b 4096 -N "MySB - root user" -f /root/.ssh/id_rsa
ls -lat /root/.ssh/id_rsa

#### AES-NI Crypto Acceleration
echo
echo "########## AES-NI Crypto Acceleration"
if [ -n "$(grep 'aes' /proc/cpuinfo)" ]; then
    ## load
    modprobe aesni_intel

    if [ -n "$(lsmod | grep 'aes')" ]; then
        ## make permanent
        [ -z "$(grep 'aesni_intel' /etc/modules)" ] && echo aesni_intel | tee -a /etc/modules
        [ -z "$(grep 'OPENSSL_ia32cap=~0x200000200000000' /etc/environment)" ] && echo "OPENSSL_ia32cap=~0x200000200000000" | tee -a /etc/environment
    fi
    cat /etc/modules
    cat /etc/environment
fi

#### Force CPU governor to "performance"
echo
echo "########## Force CPU governor to 'performance'"
install -v -o root -g root -m 0644 ${MySB_InstallDir}/templates/tweaks/etc.default.cpufrequtils.tmpl /etc/default/cpufrequtils
cpufreq-set -r -g performance
if [ -f /proc/cpuinfo ]; then
    echo
    grep 'model name' /proc/cpuinfo | head -n 1
    grep 'cpu MHz' /proc/cpuinfo
fi

#### Tweaks for Redis
if [ -f /etc/default/grub ]; then
    echo
    echo "########## Tweaks for Redis"
    source /etc/default/grub
    if [ -n "$GRUB_CMDLINE_LINUX" ] && [ -z "$(echo $GRUB_CMDLINE_LINUX | grep 'transparent_hugepage=never')" ]; then
        sed -i "s/$GRUB_CMDLINE_LINUX/$GRUB_CMDLINE_LINUX transparent_hugepage=never/g;" /etc/default/grub
    else
        perl -pi -e 's/GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="transparent_hugepage=never"/g' /etc/default/grub
    fi
    update-grub
    grep GRUB_CMDLINE_LINUX /etc/default/grub
fi

#### /etc/fstab
echo
echo "########## /etc/fstab"
gfnFstabGeneration
cat /etc/fstab

#### SystemD
echo
echo "########## SystemD"
if [ -f /etc/default/grub ]; then
    source /etc/default/grub
    if [ -n "${GRUB_CMDLINE_LINUX_DEFAULT}" ] && (! grep -q 'init=/bin/systemd' <<<"${GRUB_CMDLINE_LINUX_DEFAULT}"); then
        sed -i "s/${GRUB_CMDLINE_LINUX_DEFAULT}/${GRUB_CMDLINE_LINUX_DEFAULT} init=\/bin\/systemd/g;" /etc/default/grub
    else
        perl -pi -e 's/GRUB_CMDLINE_LINUX_DEFAULT=""/GRUB_CMDLINE_LINUX_DEFAULT="init=\/bin\/systemd"/g' /etc/default/grub
    fi
    update-grub
    grep GRUB_CMDLINE_LINUX_DEFAULT /etc/default/grub
fi
if [ -f /etc/systemd/system.conf ]; then
    # CPUAffinity
    sOldValue="$(grep CPUAffinity /etc/systemd/system.conf)"
    aNewValues=()
    for ((i = 1; i <= gsProcessors; i++)); do
        aNewValues+=("${i}")
    done
    sed -i "s/${sOldValue}/CPUAffinity=${aNewValues[*]}/g;" /etc/systemd/system.conf
    sed -i "s/^#CPUAffinity/SyslogFacility/g;" /etc/systemd/system.conf
    grep CPUAffinity /etc/systemd/system.conf
fi

#### Cleaning
echo
echo "########## Cleaning"
rm -rvf /var/log/exim4
rm -rvf /var/log/news
OldKernelList=$(dpkg --list | grep linux-image | awk '{ print $2 }' | sort -V | sed -n "/$(uname -r)/q;p")
[ -n "$OldKernelList" ] && apt-get -y --assume-yes purge $OldKernelList
update-grub

#### Logrotate
echo
echo "########## Logrotate"
gfnLogRotate 'mysb'

#### /usr/sbin/policy-rc.d
echo
echo "########## Packages install without starting daemons"
install -v -o root -g root -m 0644 ${MySB_InstallDir}/templates/tweaks/usr.sbin.policy-rc.d.tmpl /usr/sbin/policy-rc.d

#### Restart services
echo
echo "########## Restart services"
gfnManageServices restart "$ServicesToRestart"

#### Create init script for MySB_SecurityRules_Init
echo
echo "########## MySB_SecurityRules_Init"
install -v -o root -g root -m 0644 ${MySB_InstallDir}/templates/systemd/MySB_SecurityRules_Init.service.tmpl /lib/systemd/system/MySB_SecurityRules_Init.service
perl -pi -e "s/<InstallDir>/${gsInstallDirEscaped}/g" /lib/systemd/system/MySB_SecurityRules_Init.service
systemctl enable MySB_SecurityRules_Init.service

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
