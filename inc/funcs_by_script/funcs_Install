#!/bin/bash
# rev 6.0
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
{ [ -z "${vars}" ] || [ "${vars}" -ne 1 ]; } && {
    echo "Please load 'vars' file before..."
    return
}
##################### FIRST LINE #####################################

#### Logrotate
gfnLogRotate() {
    if [ -n "${1}" ] && [ -f "${MySB_InstallDir}/templates/logrotate/etc.logrotate.d.${1}.tmpl" ]; then
        rm -vf /etc/logrotate.d/"${1}"*
        install -v -o root -g root -m 0644 "${MySB_InstallDir}/templates/logrotate/etc.logrotate.d.${1}.tmpl" /etc/logrotate.d/"${1}"
        perl -pi -e "s/<MySB_InstallDir>/${gsInstallDirEscaped}/g" /etc/logrotate.d/"${1}"
        if [ -n "$2" ] && [ "$2" -eq 1 ]; then
            logrotate -f /etc/logrotate.d/"${1}"
        fi
    fi
}

#### Installation of a package bundle
gfnPackageBundleInstall() {
    local aAllArgs aPackagesRequired aPackagesToInstall sOption
    aPackagesToInstall=()
    aPackagesRequired=()
    sOption=""
    aAllArgs=("$@")

    # backports
    (grep -q 'backports\|reinstall' <<<"${aAllArgs[@]}") && {
        sOption="${aAllArgs[0]}"
        aArgs=("${aAllArgs[@]/$sOption/}")
    }
    for arg in "${aAllArgs[@]}"; do
        [ -n "${arg}" ] && aArgs+=("${arg}")
    done

    # sort & uniq packages list
    mapfile -t aPackagesRequired < <(echo "${aArgs[*]}" | tr ' ' '\n' | sort | uniq)

    for sPackage in "${aPackagesRequired[@]}"; do
        if [ -n "${sPackage}" ]; then
            if ! dpkg -s "${sPackage}" &>/dev/null; then
                aPackagesToInstall+=("${sPackage}")
            fi
        fi
    done

    if [ -n "${aPackagesToInstall[*]}" ]; then
        gfnPackagesManage 'install' "$sOption" "${aPackagesToInstall[@]}"
    else
        for sPackage in "${aPackagesRequired[@]}"; do
            if [ -n "${sPackage}" ]; then
                echo "${sPackage} is already installed !"
            fi
        done
    fi
}

#### apt-get
gfnPackagesManage() {
    local aAllArgs sQuery aPackageList sFinalList sOption sAptCmd aGlobalArgs sSystemValues
    local nForceUpdate tDiff nLocalMirror tNow tVarX tVarY dAptDate nBetweenUpdate
    nBetweenUpdate=2 # In hours
    sAptCmd="apt-get"
    aAllArgs=("$@")
    nForceUpdate=0
    tDiff=0
    nLocalMirror=0

    # install, update, upgrade, purge...
    sQuery="${aAllArgs[0]}"
    # backports, reinstall
    sOption="${aAllArgs[1]}"
    aAllArgs=("${aAllArgs[@]/${sQuery}/}")
    case "${sOption}" in
        'backports')
            aGlobalArgs=(-y --assume-yes -t "${gsDebianRelease}-${sOption}")
            aAllArgs=("${aAllArgs[@]/${sOption}/}")
            ;;
        'reinstall')
            aGlobalArgs=(-y --assume-yes --reinstall)
            aAllArgs=("${aAllArgs[@]/${sOption}/}")
            ;;
        *) aGlobalArgs=(-y --assume-yes) ;;
    esac

    # sort & uniq packages list
    mapfile -t aPackageList < <(echo "${aAllArgs[*]}" | tr ' ' '\n' | sort | uniq)

    echo
    echo "------------------------------"
    echo "Apt command: ${sQuery}"
    echo "Apt option: ${sOption}"
    echo "Packages: ${aPackageList[*]}"
    echo "------------------------------"

    # Check if an update is required before
    if [ "${gbIsReady_MySB_Db}" == "YES" ]; then
        sSystemValues="$(cmdMySQL 'MySB_db' "SELECT apt_update,apt_date FROM system WHERE id_system='1';" | sed 's/\t/|/g;')"
        nForceUpdate="$(echo "$sSystemValues" | awk '{split($0,a,"|"); print a[1]}')"
        dAptDate="$(echo "$sSystemValues" | awk '{split($0,a,"|"); print a[2]}')"
        if [ "$dAptDate" == "0000-00-00 00:00:00" ]; then
            dAptDate="$(date +%Y-%m-%d\ %H:%M:%S)"
            cmdMySQL 'MySB_db' "UPDATE system SET apt_date='$dAptDate' WHERE id_system='1';" -v
        fi
        dAptDate=$(date -d "$dAptDate" +"%Y-%m-%d %H")
        tNow=$(date +%Y-%m-%d\ %H)
        tVarX=$(date --date="$dAptDate" +'%-H')
        tVarY=$(date --date="$tNow" +'%-H')
        tDiff=$((tVarY - tVarX))
    fi

    echo
    echo "------------------------------"
    echo "Update required (tDiff):      $([ "${tDiff}" -gt "${nBetweenUpdate}" ] && echo "YES" || echo "NO") (${tDiff})"
    echo "Update forced (nForceUpdate): $(echo "$nForceUpdate" | sed 's/0/NO/g;s/1/YES/g;')"
    echo "------------------------------"

    #### Check last update
    if [ "$gbIsReady_MySB_Db" == "YES" ]; then
        #### Need of 'apt-get update' ? (must be greater than X hours OR forced)
        if [ "$nForceUpdate" -eq 1 ] || [ "$tDiff" -gt "${nBetweenUpdate}" ] || [[ ${sQuery} == *"upgrade"* ]]; then
            echo
            echo "------------------------------"
            echo "${sAptCmd} ${aGlobalArgs[*]} autoremove --purge"
            echo "------------------------------"
            ${sAptCmd} "${aGlobalArgs[@]}" autoremove --purge
            echo
            echo "------------------------------"
            echo "${sAptCmd} ${aGlobalArgs[*]} autoclean"
            echo "------------------------------"
            ${sAptCmd} "${aGlobalArgs[@]}" autoclean
            echo
            echo "------------------------------"
            echo "${sAptCmd} ${aGlobalArgs[*]} clean"
            echo "------------------------------"
            ${sAptCmd} "${aGlobalArgs[@]}" clean

            if gfnCheckCommand 0 apt-mirror && [ -f /etc/apt/mirror.list ]; then
                case "${sQuery}" in
                    'install')
                        for Package in "${aPackageList[@]}"; do
                            case "$Package" in
                                'webmin' | 'pgld' | 'pglcmd' | 'pglgui' | "${binPhpService}") nLocalMirror=1 ;;
                            esac
                        done
                        ;;
                    'upgrade') nLocalMirror=1 ;;
                esac
                if [ $nLocalMirror -eq 1 ]; then
                    echo
                    echo "------------------------------"
                    echo "apt-mirror"
                    echo "------------------------------"
                    apt-mirror
                fi
            fi

            echo
            echo "------------------------------"
            echo "${sAptCmd} ${aGlobalArgs[*]} -o Acquire::Check-Valid-Until=false update"
            echo "------------------------------"
            export DEBIAN_FRONTEND=noninteractive
            ${sAptCmd} "${aGlobalArgs[@]}" -o 'Acquire::Check-Valid-Until=false' update
            cmdMySQL 'MySB_db' "UPDATE system SET apt_update='0', apt_date='$(date +%Y-%m-%d\ %H:%M:%S)' WHERE id_system='1';" -v
        fi
    else
        echo
        echo "------------------------------"
        echo "${sAptCmd} ${aGlobalArgs[*]} -o Acquire::Check-Valid-Until=false update (MySQL not ready)"
        echo "------------------------------"
        export DEBIAN_FRONTEND=noninteractive
        ${sAptCmd} "${aGlobalArgs[@]}" -o 'Acquire::Check-Valid-Until=false' update
    fi

    case "${sQuery}" in
        'install')
            if [ -z "${aPackageList[*]}" ]; then
                echo
                echo "------------------------------"
                echo "${sAptCmd} ${aGlobalArgs[*]} -f -V -o Dpkg::Options::=\"--force-confold\" install"
                echo "------------------------------"
                export DEBIAN_FRONTEND=noninteractive
                ${sAptCmd} "${aGlobalArgs[@]}" -f -V -o Dpkg::Options::="--force-confold" install
                echo
                echo "------------------------------"
                echo "${sAptCmd} ${aGlobalArgs[*]} -f -V -o Dpkg::Options::=\"--force-confold\" --fix-broken install"
                echo "------------------------------"
                export DEBIAN_FRONTEND=noninteractive
                ${sAptCmd} "${aGlobalArgs[@]}" -f -V -o Dpkg::Options::="--force-confold" --fix-broken install
            else
                echo
                echo "------------------------------"
                echo "${sAptCmd} ${aGlobalArgs[*]} -V -o Dpkg::Options::=\"--force-confold\" install ${aPackageList[*]}"
                echo "------------------------------"
                export DEBIAN_FRONTEND=noninteractive
                ${sAptCmd} "${aGlobalArgs[@]}" -V -o Dpkg::Options::="--force-confold" install "${aPackageList[@]}"
            fi
            ;;
        'upgrade')
            if [ "$(${sAptCmd} --help | grep safe-upgrade | awk '{ print $1 }')" == "safe-upgrade" ]; then
                echo
                echo "------------------------------"
                echo "${sAptCmd} ${aGlobalArgs[*]} -V -o Dpkg::Options::=\"--force-confold\" safe-upgrade"
                echo "------------------------------"
                export DEBIAN_FRONTEND=noninteractive
                ${sAptCmd} "${aGlobalArgs[@]}" -V -o Dpkg::Options::="--force-confold" safe-upgrade
            else
                echo
                echo "------------------------------"
                echo "${sAptCmd} ${aGlobalArgs[*]} -V -o Dpkg::Options::=\"--force-confold\" upgrade"
                echo "------------------------------"
                export DEBIAN_FRONTEND=noninteractive
                ${sAptCmd} "${aGlobalArgs[@]}" -V -o Dpkg::Options::="--force-confold" upgrade
            fi
            if [ "$(${sAptCmd} --help | grep dist-upgrade | awk '{ print $1 }')" == "dist-upgrade" ]; then
                echo
                echo "------------------------------"
                echo "${sAptCmd} ${aGlobalArgs[*]} -V -o Dpkg::Options::=\"--force-confold\" dist-upgrade"
                echo "------------------------------"
                export DEBIAN_FRONTEND=noninteractive
                ${sAptCmd} "${aGlobalArgs[@]}" -V -o Dpkg::Options::="--force-confold" dist-upgrade
            else
                echo
                echo "------------------------------"
                echo "${sAptCmd} ${aGlobalArgs[*]} -V -o Dpkg::Options::=\"--force-confold\" full-upgrade"
                echo "------------------------------"
                export DEBIAN_FRONTEND=noninteractive
                ${sAptCmd} "${aGlobalArgs[@]}" -V -o Dpkg::Options::="--force-confold" full-upgrade
            fi
            ;;
        'purge')
            sFinalList=()
            for sPackage in "${aPackageList[@]}"; do
                if dpkg -s "${sPackage}" &>/dev/null; then
                    sFinalList+=("${sPackage}")
                fi
            done

            if [ -n "${sFinalList[*]}" ]; then
                echo
                echo "------------------------------"
                echo "${sAptCmd} ${aGlobalArgs[*]} purge ${sFinalList[*]}"
                echo "------------------------------"
                export DEBIAN_FRONTEND=noninteractive
                ${sAptCmd} "${aGlobalArgs[@]}" purge "${sFinalList[@]}"
            fi
            ;;
    esac

    return $?
}

##################### LAST LINE ######################################
